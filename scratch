let index = 0;
const data = [
    { key: index++, label: 'Dashboard' },
    { key: index++, label: 'Settings' },
    { key: index++, label: 'Find Help' },
    { key: index++, label: 'Log Out' }
];
return (
  <ScrollView style={styles.container}>
  <View style={{flex:1, justifyContent:'space-around', padding:50}}>

      <ModalPicker
          data={data}
          initValue="Select something yummy!"
          onChange={(option)=>{ alert(`${option.label} (${option.key})
          nom nom nom`) }} />
  </View>
      <View style={styles.titleContainer}>
        <Avatar
          size="medium"
          rounded
          source={{uri: "https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg"}}
          onPress={() => console.log("Works!")}
          activeOpacity={0.7}
        />
        <Text h2>Welcome, User!</Text>
      </View>
      <View style={styles.textView}>
         <Text h4>How is your day going today?</Text>
      </View>
      <View style={styles.imageView}>
         <Image
            style={styles.pic}
            source={require('../placement-pictures/pug.jpg')}
         />
          <Text h3></Text>
          <Text style={styles.taglineStyle}>insert quote here</Text>
        </View>
    </ScrollView>
  );
}
}
------------------------------------------------------------------------------------------------------------

import React from 'react';
import { StyleSheet, View, Image } from 'react-native';
import {Text, Button, Avatar } from 'react-native-elements';
import SignUpPage from './Pages/SignUpPage.js';
import SetUpPage from './Pages/SetUpPage.js';
import PreferencesPage from './Pages/PreferencesPage.js';
import LoginPage from './Pages/LoginPage.js';
import DashboardPage from './Pages/DashboardPage.js';
import HelpPage from './Pages/HelpPage.js';
import { createStackNavigator } from 'react-navigation';
import LandingPage from './Pages/LandingPage.js';
import ModalExample from './Components/Modal.js';
import Expo from 'expo';
const { manifest } = Expo.Constants;
const api = (typeof manifest.packagerOpts === `object`) && manifest.packagerOpts.dev?
  manifest.debuggerHost.split(`:`).shift().concat(`:3000`):
  `http://pure-ridge-12887.herokuapp.com/api/users`
  //replace api.example.com with our production host

const RootStack = createStackNavigator(
  // Creating the navigation for our application
  {
    Landing: LandingPage,
    SignUp: SignUpPage,
    LogIn: LoginPage,
    SetUp: SetUpPage,
    Dashboard: DashboardPage,
    Help: HelpPage,
    Preferences: PreferencesPage,
  },
  {
    //Setting the initial route for our application
    initialRouteName: 'Landing',
    headerMode: "none",
    navigationOptions: {
      headerStyle:{
        //setting the purple color of the nav bar
        backgroundColor: "#6d2493"
      },
      //setting the title and arrow color in the nav bar
      headerTintColor: "#ffffff",
    }
  }
);

export default class App extends React.Component{
//Rendering the rootstack which is setting our navigation
  render(){
    console.log(api);
    return <RootStack /> ;
  }
}
------------------------------------------------------------------------------------------
<View>
<KeyboardAvoidingView style={styles1.container} behavior="position">
<Text style={styles1.title}>Expo Sample Notifications App</Text>
<Text style={styles1.text}>Title</Text>
<TextInput
  style={styles1.input}
  onChangeText={title => this.setState({ title })}
  maxLength={100}
  value={this.state.title}
/>
<Text style={styles1.text}>Message</Text>
<TextInput
  style={styles1.input}
  onChangeText={body => this.setState({ body })}
  maxLength={100}
  value={this.state.body}
/>
<TouchableOpacity
  onPress={() => this.registerForPushNotifications()}
  style={styles1.touchable}>
  <Text>Register me for notifications!</Text>
</TouchableOpacity>
<TouchableOpacity onPress={() => this.sendPushNotification()} style={styles1.touchable}>
  <Text>Send me a notification!</Text>
</TouchableOpacity>
{this.state.token ? (
  <View>
    <Text style={styles1.text}>Token</Text>
    <TextInput
      style={styles1.input}
      onChangeText={token => this.setState({ token })}
      value={this.state.token}
    />
  </View>
) : null}
{this.state.notification ? (
  <View>
    <Text style={styles1.text}>Last Notification:</Text>
    <Text style={styles1.text}>{JSON.stringify(this.state.notification.data.message)}</Text>
  </View>
) : null}
</KeyboardAvoidingView>
</View>
